<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- 开发环境可以放置 <debug /> 配置，会输出详细Security处理日志，正式环境建议屏蔽 <debug /> 配置 -->
    <debug />

	<!--
	开启支持方法注解的权限控制：
	@PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
	@PostAuthorize：该注解用来在方法执行完之后进行访问控制检查。
	@PostFilter：该注解用来对方法的返回结果进行过滤。从返回的集合中过滤掉表达式值为假的元素。如@PostFilter("hasPermission(filterObject, 'read')")说明返回的结果中只保留当前用户有读权限的元素。
	@PreFilter：该注解用来对方法调用时的参数进行过滤。	
	-->
    <global-method-security pre-post-annotations="enabled" />

	<!-- 不用权限管理的资源路径 -->
    <http pattern="/css/**" security="none"/>
    <http pattern="/icon/**" security="none"/>
    <http pattern="/img/**" security="none"/>
    <http pattern="/images/**" security="none"/>
    <http pattern="/js/**" security="none"/>
    <http pattern="/index.*" security="none"/>
    <http pattern="/login**/**" security="none"/>
    <http pattern="/staticFile" security="none"/>
     <http pattern="/plugins/**" security="none"/>
    <http pattern="/getVerifyCode" security="none"/>
    <http pattern="/designer" security="none"/>
    <http pattern="/help" security="none"/>

    <!-- <http use-expressions="true"> -->
    <!-- 或 -->
    <http use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint" access-denied-page="/u/accessDenied">
    	
    	<!-- 指定某角色能访问的资源 -->
        <intercept-url pattern="/u/super/**" access="hasRole('ROLE_SUPER')"/>
        
		<!-- 以上未列出的，也都必须验证才能访问 -->
        <intercept-url pattern="/**" access="isAuthenticated()" />
		 
        <!-- 所有地址全开，无需验证，测试用 -->
        <!-- <intercept-url pattern="/**" access="permitAll" /> -->
		
        <!-- 
        logout-url 属性:这个指定的URL会触发注销操作，默认是 /j_spring_security_logout
        invalidate-session 属性：如果为true，在注销的时候会销毁会话
        delete-cookies 属性：以逗号分隔的cookies名称，在用户注销时删除指定的cookies
        -->
        <logout logout-success-url="/login" invalidate-session="true" delete-cookies="JSESSIONID"/>
        
        <!-- 实现免登陆验证 -->
        <remember-me/>

        <!--
        session超时跳转页面 以及每用户可拥有的session最大个数
        如果每次退出后，必须要求用户必须重开浏览器才能登录，可以将 invalid-session-url="/logout.jsp"，防止有些 Web 应用把用户的会话标识符直接通过 URL 的参数来传递        
        -->
        <session-management invalid-session-url="/login">
            <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" expired-url="/login" />
        </session-management> 
		
		<!-- 使用验证码过滤器 -->
		<!-- <form-login /> -->
		<!-- 或 -->
		<custom-filter ref="validateCodeAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		
		<!-- 使用自定义的过滤器 -->
		<custom-filter ref="webSecurityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		
    </http>
    
    <!-- 配置登录入口点 -->
	<beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login"/>
		<!-- 是否强制HTTPS -->
		<beans:property name="forceHttps" value="false" />
	</beans:bean>
	
	<!-- 配置自定义的支持验证码等多功能过滤器 -->
	<beans:bean id="validateCodeAuthenticationFilter" init-method="init" class="com.bruce.baseAdmin.security.ValidateCodeUsernamePasswordAuthenticationFilter">
		<beans:property name="filterProcessesUrl" value="/doLogin"></beans:property>
		<beans:property name="userNameParameter" value="userName"></beans:property>
		<beans:property name="passWordParameter" value="passWord"></beans:property>
		<beans:property name="successUrl" value="/home/index"></beans:property>
		<beans:property name="failureUrl"	value="/login"></beans:property>
		<beans:property name="authenticationManager" ref="webAuthenticationManager"></beans:property>
	</beans:bean>
	
    <!-- 实现了 UserDetailsService 接口的类 -->  
    <authentication-manager alias="webAuthenticationManager">  
        <authentication-provider user-service-ref="webUserDetailsService">
	        <!-- 密码的加密解密类 -->
			<password-encoder ref="pwEncoder"/>
		</authentication-provider>
		
    </authentication-manager>
    
	<!-- 密码的加密解密类，可以换成自己的，实现 PasswordEncoder 接口即可 -->
    <beans:bean id="pwEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder"/>
    
    

	<!-- 配置自定义的过滤器 -->
	<!-- 
	如果使用SPRING注解方式，则可直接注释掉
	
	authenticationManager：用户拥有的权限
	accessDecisionManager：用户是否拥有所请求资源的权限
	securityMetadataSource：资源与权限对应关系
	
	<beans:bean id="webSecurityFilter" class="com.mingtang.hotel.security.WebSecurityFilter">  
        <beans:property name="authenticationManager" ref="webAuthenticationManager" />  
        <beans:property name="accessDecisionManager" ref="webAccessDecisionManager" />  
        <beans:property name="securityMetadataSource" ref="webSecurityMetadataSource" />
    </beans:bean>
    
	或直接使用Spring自带的URL过滤器
    <beans:bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="webAuthenticationManager" />  
        <beans:property name="accessDecisionManager" ref="webAccessDecisionManager" />  
        <beans:property name="securityMetadataSource" ref="webSecurityMetadataSource" />
    </beans:bean>
    -->

    <!-- 核心验证类 -->
    <!-- 如果使用SPRING注解方式，则可直接注释掉 -->
    <!--
    <beans:bean id="webUserDetailsService" class="com.mingtang.hotel.security.WebUserDetailsService"/>
    <beans:bean id="webAccessDecisionManager" class="com.mingtang.hotel.security.WebAccessDecisionManager"/>
    <beans:bean id="webSecurityMetadataSource" class="com.mingtang.hotel.security.WebSecurityMetadataSource"/>
	-->
	
	<!-- 
	其它补充说明：
	
	当用户不存在时，也是提示 Bad credentials (即密码错误)，这是为了安全性，防止被暴力猜测用户名
	如果您要提示用户不存在的信息，则需要将 org.springframework.security.authentication.dao.DaoAuthenticationProvider 中的 hideUserNotFoundExceptions 设为false，即可
	具体修改配置如下：	
	<authentication-manager alias="authenticationManager"> 
	    <authentication-provider  ref="authenticationProvider" > 
	    </authentication-provider> 
	</authentication-manager> 
 
	<bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"> 
	    <property name="userDetailsService" ref="webUserDetailsService" /> 
	    <property name="hideUserNotFoundExceptions" value="false" /> 
	    <property name="passwordEncoder" ref="pwEncoder" />
	</bean>
	
	 -->

</beans:beans>
